package com.kosa.myapp3.common;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

//import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class DownController {
	@RequestMapping("/down")
	public void download(HttpServletRequest req, HttpServletResponse res, String path, String filename) {
//		path - 모든 파일을 같은 폴더에 업로드하면 관리가 어렵다.
//			/upload/board , /upload/gallery, /upload/ads ... 이런 식으로 나누어서 업로드를 한다.
//			path에는 board, gallery, ads 등 /upload 아래 폴더명이 들어간다.
//		filename : 다운로드할 파일명
		
//		서블릿 3.0 잇아부터 가상 폴더의 실제 물리적 구조를 알려주는 함수가 생겼음
//		실제 서버에 올릴 때는 .metadata 속에 업로드 되므로 사용 가능한데 지금은 spws에 upload 폴더를 만들어서 이 함수는 안됨
//		ServletContext ctx = req.getServletContext();
//		String fullPath = ctx.getRealPath("/upload/"+path);
		String fullPath = CommonConst.UPLOADPATH+"/"+path;
		System.out.println(fullPath);
		System.out.println(filename);
		
//		서버에 있는 파일을 읽어서 클라이언트로 전송해야 한다
		InputStream in = null;
//		서버 : 파일을 읽어서(InputStream)
		OutputStream out = null;
//		클라이언트에 전송(OutputStream)
		File file = null;
		boolean skip = false;
//		skip: 파일이 서버에 존재해야 전송한다.
//			  이 변수의 값이 false여야 파일을 전송한다. (기본값 false)
		
		
//	chrome에서만 됨	
//		파일은 두 종류가 있다.
//		이진파일(이미지, 동영상, exe, class 파일 등): 그림판, window player
//												컴퓨터 메모리 그대로 파일을 저장
//												이진파일 타입을 cmd로 확인하면 ??JFIFH... 이딴식으로 나옴
//		텍스트 파일(txt, 소스파일들): 특별한 프로그램 없이 읽을 수 있음 
//								컴퓨터 내부의 메모리를 가공해서 저장
//		동영상(이진파일)을 텍스트 파일로 취급하면 복구 불가
//		이진으로 처리를 해야 본래 파일을 손상시키지 않는다. 즉, 이진 형태로 보내야 한다.
		try {
			file = new File(fullPath, filename);
//				파일을 찾아서
			in = new FileInputStream(file);
//				읽을 준비중
		} catch (Exception e) {
			e.printStackTrace();
//			파일이 존재하지 않거나 그 밖의 오류로 전송불가면
			skip = true;
		}
		if(skip==true) {
			return;
		}
		
//		보낼 준비
		res.reset();
//			혹시 서버에서 클라이언트로 보낼 정보가 남아있을 경우 비우자
		
		res.setContentType("application/octet-stream");
//			2진 형태로 파일을 보내겠다는 사실을 클라이언트에 알린다.
		
		res.setHeader("Content-Disposition", "attachment; filename=\""+filename+"\"");
//			attachment; filename="test.txt" 이런식으로 보내야 되니까 ""안에 "를 넣어줘야 함, \" 형식으로 작성
		res.setHeader("Content-type", "application/octet-stream");
		res.setHeader("Content-length", file.length()+"");
		
		
		try {
			out = res.getOutputStream();
//			파일을 보내기 위한 통로 개설
//			파일을 byte 단위로 읽어야 한다.
//			파일이 아주 클 경우에 한 번에 메모리 확보가 안 될 경우 잘라서 읽어 보내야 한다.
			byte b[] = new byte[(int)file.length()];
//			현재는 파일 하나를 저장할 byte 배열을 만들었음
			int leng = 0;
//			in.read(b) : 주어진 배열의 크기만큼 데이터를 읽어온다.
//			반환값을 실제로 읽은 데이터의 크기이다.
			while ((leng=in.read(b))>0) {
//									>0 : 읽은 데이터가 있다면
				out.write(b, 0, leng);
//				클라이언트로 전송하라
			}
			out.close();
			in.close();
//			파일을 닫는다.
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
//	http://localhost:9000/myapp3/down?path=board&filename=test.txt
//	C:\kwak\spws\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\myapp3\\upload\board[getRealPath]
}
